name: ci

on:
  push:
    branches:
      - "ci"

env:
  AWS_REGION: us-east-1                  # set this to  your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: demo-deploy          # set this to your Amazon ECR repository name
  ECS_SERVICE: demo-deploy                # set this to your Amazon ECS service name
  ECS_CLUSTER: demo-deploy                 # set this to your Amazon ECS cluster name
  # ECS_TASK_DEFINITION: "${{ github.workspace }}/task-definition.json"      # set this to the path to your Amazon ECS task definition                                           # file, e.g. .aws/task-definition.json
  

jobs:
  set-tag:
    name: Create tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.increment-git-tag.outputs.git-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Increment tag
        id: increment-git-tag
        working-directory: ./high_load_22_ci_cd
        run: |
          bash ./build/git_update.sh -v patch

  build:
    runs-on: ubuntu-latest
    needs: set-tag
    env:
      IMAGE_TAG: ${{ needs.set-tag.outputs.tag }}
      CONTAINER_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/demo-deploy:${{ needs.set-tag.outputs.tag }}
    outputs:
      container_name: ${{ env.CONTAINER_NAME }}
      # container_name: maksymtatseko/demo-deploy:v0.1.27
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3

      - name: Print container name
        run: echo ${{ env.CONTAINER_NAME }}
      
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build and push
        env:
          IMAGE: high_load_22_ci_cd/node
        uses: docker/build-push-action@v3
        with:
          context: "${{ github.workspace }}/high_load_22_ci_cd/node"
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/demo-deploy:${{ env.IMAGE_TAG }}

  ecr:
    runs-on: ubuntu-latest
    needs: [set-tag, build]
    env:
      # IMAGE_TAG: ${{ needs.set-tag.outputs.tag }}
      # CONTAINER_NAME: maksymtatseko/demo-deploy:${{ needs.set-tag.outputs.tag }}
      CONTAINER_NAME: maksymtatseko/demo-deploy:v0.1.35

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Push to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: demo-deploy
      run: |
        docker pull ${{ env.CONTAINER_NAME }}
        docker tag ${{ env.CONTAINER_NAME }} $ECR_REGISTRY/$ECR_REPOSITORY:v0.1.35
        docker image push $ECR_REGISTRY/$ECR_REPOSITORY:v0.1.35

    - name: Fill in the new image ID in the Amazon ECS task definition
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: demo-deploy
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: demo-deploy
        image: $ECR_REGISTRY/$ECR_REPOSITORY:v0.1.35

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true



  