name: ci

on:
  push:
    branches:
      - "ci"

env:
  ECR_REPOSITORY: demo-deploy
  ECS_SERVICE: demo-deploy
  ECS_CLUSTER: demo-deploy

jobs:
  set-tag:
    if: true
    name: Create tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.increment-git-tag.outputs.git-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Increment tag
        id: increment-git-tag
        working-directory: ./high_load_22_ci_cd
        run: |
          bash ./build/git_update.sh -v patch

  build:
    if: true
    runs-on: ubuntu-latest
    needs: set-tag
    env:
      IMAGE_TAG: ${{ needs.set-tag.outputs.tag }}
      CONTAINER_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/demo-deploy:${{ needs.set-tag.outputs.tag }}
    outputs:
      container_name: ${{ env.CONTAINER_NAME }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3

      - name: Print container name
        run: echo ${{ env.CONTAINER_NAME }}
      
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build and push
        env:
          IMAGE: high_load_22_ci_cd/node
        uses: docker/build-push-action@v3
        with:
          context: "${{ github.workspace }}/high_load_22_ci_cd/node"
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/demo-deploy:${{ env.IMAGE_TAG }}

  unit-tests:
    runs-on: ubuntu-latest
    needs: [set-tag, build]
    env:
      IMAGE_TAG: ${{ needs.set-tag.outputs.tag }}
      CONTAINER_NAME: ${{ needs.build.outputs.container_name }}
    container: maksymtatseko/demo-deploy:${{ needs.set-tag.outputs.tag }}

    steps:
      - name: Run unit tests
        run: |
          cd /code
          npm i
          npm run test

  stage:
    needs: [set-tag, build, unit-tests]
    uses: ./.github/workflows/deploy.yml
    with:
      ECS_SERVICE: demo-deploy
      ECS_CLUSTER: demo-deploy
      tag: ${{ needs.set-tag.outputs.tag }}
      task: task-definition.json
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  
  integration-tests:
    runs-on: ubuntu-latest
    needs: [set-tag, build, stage]
    env:
      IMAGE_TAG: ${{ needs.set-tag.outputs.tag }}
      CONTAINER_NAME: ${{ needs.build.outputs.container_name }}
    container: maksymtatseko/demo-deploy:${{ needs.set-tag.outputs.tag }}

    steps:
      - name: Run integration tests
        run: |
          cd /code
          npm i
          npm run test:integration

  production:
    needs: [set-tag, integration-tests]
    uses: ./.github/workflows/deploy.yml
    with:
      ECS_SERVICE: prod-deploy
      ECS_CLUSTER: prod-deploy
      tag: ${{ needs.set-tag.outputs.tag }}
      task: task-definition-prod.json
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
