name: ci

on:
  push:
    branches:
      - "ci"

env:
  AWS_REGION: us-east-1                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: demo-deploy          # set this to your Amazon ECR repository name
  ECS_SERVICE: demo-deploy                # set this to your Amazon ECS service name
  ECS_CLUSTER: demo-deploy                 # set this to your Amazon ECS cluster name
  # ECS_TASK_DEFINITION: "${{ github.workspace }}/task-definition.json"      # set this to the path to your Amazon ECS task definition                                           # file, e.g. .aws/task-definition.json
  CONTAINER_NAME_2: demo-deploy  

jobs:
  ecr:
    runs-on: ubuntu-latest
    # needs: [set-tag, build, unit]
    env:
      # IMAGE_TAG: ${{ needs.set-tag.outputs.tag }}
      # CONTAINER_NAME: maksymtatseko/node_hello:${{ needs.set-tag.outputs.tag }}
      CONTAINER_NAME: maksymtatseko/node_hello:v0.1.35

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Push to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: node_hello
      run: |
        docker pull ${{ env.CONTAINER_NAME }}
        docker tag ${{ env.CONTAINER_NAME }} $ECR_REGISTRY/$ECR_REPOSITORY:v0.1.35
        docker image push $ECR_REGISTRY/$ECR_REPOSITORY:v0.1.35

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME_2 }}
        image: $ECR_REGISTRY/$ECR_REPOSITORY:v0.1.35



  